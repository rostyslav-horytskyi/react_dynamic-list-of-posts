{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","api/posts.js","api/api.js","api/comments.js","App.jsx","index.js"],"names":["PostsList","posts","selectPost","postId","className","map","post","key","id","userId","title","type","onClick","e","target","NewCommentForm","onAdd","useState","name","email","body","form","setForm","onChangeValue","value","newComment","onSubmit","preventDefault","placeholder","onChange","disabled","Object","values","includes","PostDetails","postDetails","comments","deleteComment","isVisible","setVisible","length","comment","request","url","options","fetch","then","response","json","result","data","getPostDetails","getPostComments","removeComment","commentId","method","createComment","headers","JSON","stringify","loadPosts","setPosts","a","postsFromServer","filter","loadUserPost","loadPostDetails","setDetails","setComments","postFromServer","commentsFromServer","loadUpdatedComments","setCommentId","App","setSelectedUserId","setPostId","setPostDetails","useEffect","addNewComment","loadNewComments","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e4bb6825.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({ posts, selectPost, postId }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li\n          key={post.id}\n          className=\"PostsList__item\"\n        >\n          <div>\n            <b>{`[User#${post.userId}]:`}</b>\n            {post.title}\n          </div>\n          {postId === post.id\n            ? (\n              <button\n                id={post.id}\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  selectPost(0);\n                }}\n              >\n                Close\n              </button>\n            )\n            : (\n              <button\n                id={post.id}\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={(e) => {\n                  selectPost(+e.target.id);\n                }}\n              >\n                Open\n              </button>\n            )}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectPost: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ onAdd, postId }) => {\n  const [form, setForm] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const onChangeValue = (e) => {\n    const { value, name } = e.target;\n\n    setForm({\n      ...form,\n      [name]: value,\n    });\n  };\n\n  const resetForm = () => {\n    setForm({\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  const newComment = {\n    postId,\n    ...form,\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        onAdd(newComment);\n        resetForm();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={form.name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={onChangeValue}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={form.email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={onChangeValue}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={form.body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={onChangeValue}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n        disabled={Object.values(form).includes('')}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails = (\n  { postDetails, comments, deleteComment, onAdd, postId },\n) => {\n  const [isVisible, setVisible] = useState(true);\n\n  const toggleVisible = () => {\n    setVisible(!isVisible);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length > 0 && (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={toggleVisible}\n          >\n            {`${isVisible ? 'Hide' : 'Show'} ${comments.length} comments`}\n          </button>\n        )}\n        {isVisible && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    deleteComment(comment.id);\n                  }}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm onAdd={onAdd} postId={postId} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postDetails: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteComment: PropTypes.func.isRequired,\n  onAdd: PropTypes.func.isRequired,\n  postId: PropTypes.number.isRequired,\n};\n","import { BASE_URL } from './api';\n\nexport function request(url, options) {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n\nexport const getPosts = () => request('/posts');\nexport const getUserPosts = userId => request(`/posts?userId=${userId}`);\nexport const getPostDetails = postId => request(`/posts/${postId}`);\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { request } from './posts';\n\nconst remove = url => request(url, { method: 'DELETE' });\n\nexport const getPostComments = postId => request(`/comments?postId=${postId}`);\nexport const removeComment = commentId => remove(`/comments/${commentId}`);\nexport const createComment = (\n  { postId, name, email, body },\n) => request(`/comments`, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=utf-8',\n  },\n  body: JSON.stringify({\n    postId,\n    name,\n    email,\n    body,\n  }),\n});\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUserPosts, getPostDetails } from './api/posts';\nimport { getPostComments, removeComment, createComment } from './api/comments';\n\nconst loadPosts = async(setPosts) => {\n  const postsFromServer = await getPosts();\n\n  setPosts(\n    postsFromServer.filter(data => data.userId !== null && data.title !== null),\n  );\n};\n\nconst loadUserPost = async(setPosts, id) => {\n  const postsFromServer = await getUserPosts(id);\n\n  setPosts(postsFromServer);\n};\n\nconst loadPostDetails = async(setDetails, setComments, postId) => {\n  const postFromServer = await getPostDetails(postId);\n  const commentsFromServer = await getPostComments(postId);\n\n  setComments(commentsFromServer);\n  setDetails(postFromServer);\n};\n\nconst loadUpdatedComments = async(\n  setComments, setCommentId, commentId, postId,\n) => {\n  await removeComment(commentId);\n  const commentsFromServer = await getPostComments(postId);\n\n  setComments(commentsFromServer);\n  setCommentId(0);\n};\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [userId, setSelectedUserId] = useState(0);\n  const [postId, setPostId] = useState(0);\n  const [postDetails, setPostDetails] = useState({});\n  const [comments, setComments] = useState([]);\n  const [commentId, setCommentId] = useState(0);\n\n  useEffect(() => {\n    loadPosts(setPosts);\n  }, []);\n\n  useEffect(() => {\n    if (userId > 0) {\n      loadUserPost(setPosts, userId);\n    } else {\n      loadPosts(setPosts);\n    }\n  }, [userId]);\n\n  useEffect(() => {\n    if (postId > 0) {\n      loadPostDetails(setPostDetails, setComments, postId);\n    }\n\n    if (commentId > 0) {\n      loadUpdatedComments(setComments, setCommentId, commentId, postId);\n    }\n  }, [postId, commentId]);\n\n  const addNewComment = async(comment) => {\n    await createComment(comment);\n    const loadNewComments = await getPostComments(postId);\n\n    setComments(loadNewComments);\n  };\n\n  const deleteComment = id => setCommentId(id);\n  const selectPost = post => setPostId(post);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(e) => {\n              setSelectedUserId(+e.target.value);\n              setPostId(0);\n            }}\n            value={userId}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            postId={postId}\n            selectPost={selectPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {postId > 0 && (\n            <PostDetails\n              postDetails={postDetails}\n              comments={comments}\n              deleteComment={deleteComment}\n              onAdd={addNewComment}\n              postId={postId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}